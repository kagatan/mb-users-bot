<?php

namespace App\Services\Telegram\Commands;

use App\Models\TelegramUsers;
use App\Services\Telegram\TextManager;
use WeStacks\TeleBot\Interfaces\UpdateHandler;
use WeStacks\TeleBot\Objects\Keyboard\InlineKeyboardMarkup;
use WeStacks\TeleBot\Objects\KeyboardButton;
use WeStacks\TeleBot\Objects\Update;
use WeStacks\TeleBot\TeleBot;

class InputCommand extends Command
{
    public static function trigger(Update $update, TeleBot $bot)
    {
        return isset($update->message->text) || isset($update->message->contact);
    }

    /*
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–≥–¥–∞ –±—ã–ª –≤–≤–µ–¥–µ–Ω —Ç–µ–∫—Å—Ç
     */
    public function handle()
    {
        $update = $this->update;
        $bot = $this->bot;

        $text = isset($update->message->text) ? $update->message->text : '';
        $command = TextManager::checkCommand($text);

        // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
        if (!$this->isAuth()) {

            // –ï—Å–ª–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            if (isset($update->message->contact)) {
                $command = "SEND_CONTACT"; // –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–º –º–µ–Ω—é
            }

            switch ($command) {

                case "AUTH":
                    $this->authMenu();
                    break;

                case "NO_AUTH":
                    $this->noAuthMenu();
                    break;

                case "SEND_CONTACT":
                    $this->sendContactMenu();
                    break;

                case "CONTACT_WITH_ME":
                    $this->contactWithMeMenu();
                    break;

                default:
                    $this->parseInputText($text);
            }
        } else {

//            dump($command);
            switch ($command) {

                case "MAIN_MENU":
                    $this->mainMenu();
                    break;

                case "USER_INFO":
                    $this->userInfoMenu();
                    break;

                case "NEWS":
                    $this->newsMenu();
                    break;

                case "HELP":
                    $this->helpMenu();
                    break;

                case "CONTACTS":
                    $this->contactsMenu();
                    break;

                case "ABOUT":
                    $this->aboutMenu();
                    break;

                case "SETTINGS":
                    $this->settingsMenu();
                    break;

                case "NOTIFICATIONS":
                    $this->notificationsMenu();
                    break;

                case "LANG":
                    $this->langMenu();
                    break;

                default:
                    $this->parseInputText($text);
            }
        }

    }

    /**
     * –ò—â–µ–º –≤ –∫–∞–∫–æ–µ –º–µ–Ω—é –Ω—É–∂–Ω–æ –∑–∞–π—Ç–∏
     */
    private function parseInputText($text)
    {
        $lastAction = $this->getLastAction();

        // –ï—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
        if (!$this->isAuth()) {


            switch ($lastAction) {

                case "OTP_SENDED":
                    $this->applyOtp($text);
                    break;

                default:
                    // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    $this->noAuthMenu();
            }

        } else {

            switch ($lastAction) {

                case "langMenu":

                    break;

                default:
                    // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    $this->mainMenu();
            }
        }
    }

    private function changeLang($text)
    {
        $this->setLastAction(__FUNCTION__);

    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –û–¢–† –∫–æ–¥
     */
    private function applyOtp($text)
    {
        $this->setLastAction(__FUNCTION__);

        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        $response = $this->ClientAPI->authPhoneOtpApply($text);

        if (isset($response['success'])) {

            // –ü—Ä–∏–≤—è–∂–µ–º –Ω–æ–º–µ—Ä user_id —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∫ uid –∑–∞–ø–∏—à–µ–º —Ç–æ–∫–µ–Ω
            TelegramUsers::updateOrCreate(
                ['id' => $this->getUserID()],
                [
                    'mb_uid' => $response['data']['uid'],
                    'token'  => $response['data']['token'],
                ]
            );

            $text = "–°–ø–∞—Å–∏–±–æ. –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! üéâ";

            $keyboard = [
                [["text" => TextManager::get("MAIN_MENU")]],
            ];
        } else {
            $text = "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...";
        }


        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }

    private function sendContactMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $phone_number = $this->update->message->contact->phone_number;

        // –ó–∞–ø–∏—à–µ–º –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
        TelegramUsers::where('id', $this->getUserID())
            ->update(['phone' => $phone_number]);

        $text = "–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: " . $phone_number;

        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        // –ü—Ä–∏—à–µ–ª –Ω–æ–º–µ—Ä –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ –û–¢–ü
        $response = $this->ClientAPI->authPhone($phone_number);

        if (isset($response['success'], $response['code'])) {

            switch ($response['code']) {
                case 0:
                    $text = TextManager::get("OTP_SENDED");
                    $this->setLastAction("OTP_SENDED");
                    break;

                default:
                    $text = "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...";
            }
        } else {
            // –ê–ü–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–æ
            $text = "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...";
        }


//        // –ò—â–µ–º –∞–±–æ–Ω–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
//        $response = $api->searchUser($phone_number, 'mobile_phone'); // from $phone_number
//
//        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –õ–ö API
//        if (isset($response['data'][0]['uid'])) {
//            // –ê–±–æ–Ω–µ–Ω—Ç–∞ –Ω–∞—à–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º OTP
//
//            // –ü—Ä–∏–≤—è–∂–µ–º –Ω–æ–º–µ—Ä user_id —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –∫ uid
//            $response = $api->bindUser($this->getUserID(), $response['data'][0]['uid']);
//            if (isset($response['success']) and $response['success'] === true) {
//                $text = "–°–ø–∞—Å–∏–±–æ. –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! üéâ";
//
//                $keyboard = [
//                    [["text" => TextManager::get("MAIN_MENU")]],
//                ];
//            }
//
//            // –ü–æ—É–ª—á–∏–ª–∏ OTP –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —É—á–µ—Ç–∫—É –∫ –Ω–æ–º–µ—Ä—É
//            // $text2 = "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–∑ SMS, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. ";
//
//        } else {
//            // –ê–±–æ–Ω–µ–Ω—Ç–∞ –Ω–µ –Ω–∞—à–ª–∏, –ø–∏—à–µ–º —á—Ç–æ –Ω–µ –Ω–∞—à –∞–±–æ–Ω–µ–Ω—Ç
//            $text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –í–∞—Å —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏. ";
//        }

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);

    }


    private function userInfoMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $response = $this->ClientAPI->getUser();
        $user = $response['data'];

        switch ($user['state']) {
            case 1:
                $status = '–æ–±—ã—á–Ω—ã–π';
                break;
            case 2:
                $status = '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π';
                break;
            case 3:
                $status = '–æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π';
                break;
            case 4:
                $status = '—É–¥–∞–ª–µ–Ω–Ω—ã–π';
                break;
            default:
                $status = '–æ–±—ã—á–Ω—ã–π';
        }


        $text = "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∞–±–æ–Ω–µ–Ω—Ç—É:</b>  \n";
        $text .= "<b>–§–ò–û:</b> " . $user['fio'] . "\n";
        $text .= "<b>–ë–∞–ª–∞–Ω—Å:</b> " . $user['deposit'] . " —Ä—É–±.\n";
        $text .= "<b>–ö—Ä–µ–¥–∏—Ç:</b> " . $user['credit'] . " —Ä—É–±.\n";
        $text .= "<b>–¢–∞—Ä–∏—Ñ:</b> " . $user['tarif'] . "\n";
        $text .= "<b>–õ–æ–≥–∏–Ω:</b> " . $user['user'] . "\n";
        $text .= "<b>UID:</b>" . $user['useruid'] . " \n";
        $text .= "<b>–î–æ–≥–æ–≤–æ—Ä:</b>" . $user['numdogovor'] . " \n";
        if ($user['blocked']) {
            $text .= "<b>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç:</b> üö´ \n";
        } else {
            $text .= "<b>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç:</b> ‚úÖ \n";

            if (!empty($user['date_itog'])) {
                $text .= "<b>–î–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:</b> " . $user['date_itog'] . " \n";
                $text .= "<b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> " . $user['days_left'] . " \n";
            }
        }
//        $text .= "<b>IP:</b> " . $user['framed_ip'] . "\n";
//        $text .= "<b>C—Ç–∞—Ç—É—Å:</b> " . $status . "\n";


        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }


    private function aboutMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "–ó–¥–µ—Å—å –≤ –±—É–¥—É—â–µ–º –ø–æ—è–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ";

        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }


    private function authMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "–î–ª—è —Å—Ç–∞—Ä—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç</b>";

        $keyboard = [
            [["text" => TextManager::get("SEND_CONTACT"), "request_contact" => true], ["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);

    }

    private function contactWithMeMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–π —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –ø–µ—Ä–µ–π–¥—è –ø–æ —Å—Å—ã–ª–∫–µ https://t.me/ACPMikBiLL. –¢–∞–∫–∂–µ –º—ã –º–æ–∂–µ–º –í–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç—å - –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞";

        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);

    }

    private function langMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç–µ";

        $keyboard = [
            [["text" => "üá∫üá¶ UA"], ["text" => "üá∑üá∫ RU"], ["text" => "üá∫üá∏ EN"]],
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);

    }

    private function settingsMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ \n\n";
        $text .= "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞, –ª–∏–±–æ –¥—Ä—É–≥–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π; \n";
        $text .= "üá∫üá∏ <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b> - –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥; \n";

        $keyboard = [
            [["text" => TextManager::get("NOTIFICATIONS")], ["text" => TextManager::get("LANG")]],
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }

    private function notificationsMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> \n\n";
        $text .= "üîï –ù–æ–≤–æ—Å—Ç–∏\n\n";
        $text .= "üîî –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è \n\n";
        $text .= "üîî –ó–∞ 3 –¥–Ω—è –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è \n\n";

        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }

    private function contactsMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: \n";
        $text .= "–û—Ñ–∏—Å: –≥.–í–æ–ª–Ω–æ–≤–∞—Ö–∞ —É–ª. –ù–∞—Ä–æ–¥–Ω–∞—è 101. \n";
        $text .= "—Ç. +38(093) 470-82-80 \n";
        $text .= "telegram: @kagatan";

        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }


    private function helpMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "ü§Ø –ú—ã —Å–µ–π—á–∞—Å —Å–∏–ª—å–Ω–æ –∑–∞–Ω—è—Ç—ã. –ï—Å–ª–∏ —á—Ç–æ —Ç–æ —Å—Ä–æ—á–Ω–æ–µ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É...";

        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }

    private function newsMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "ü§ê –¢—Å—Å... –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–æ–≤–æ—Å—Ç–∏, –Ω–æ —á—É—Ç—å –ø–æ–∑–∂–µ...";

        $keyboard = [
            [["text" => TextManager::get("BACK")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'parse_mode'   => 'HTML',
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }

    private function mainMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = TextManager::get("MAIN_MENU_TEXT");

        $keyboard = [
            [["text" => TextManager::get("USER_INFO")], ["text" => TextManager::get("NEWS")]],
            [["text" => TextManager::get("HELP")], ["text" => TextManager::get("CONTACTS")]],
            [["text" => TextManager::get("SETTINGS")]]
        ];

        $this->sendMessage([
            'text'         => $text,
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }

    private function noAuthMenu()
    {
        $this->setLastAction(__FUNCTION__);

        $text = "üëâ –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ —Å–µ—Ä–≤–∏—Å–µ";


        $keyboard = [
            [["text" => TextManager::get("AUTH")], ["text" => TextManager::get("CONTACT_WITH_ME")]],
        ];

        $this->sendMessage([
            'text'         => $text,
            'reply_markup' => [
                'keyboard'          => $keyboard,
                'resize_keyboard'   => true,
                'one_time_keyboard' => true
            ]
        ]);
    }

}
